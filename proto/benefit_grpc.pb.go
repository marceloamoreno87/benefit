// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/benefit.proto

package benefit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BenefitService_GetBenefit_FullMethodName = "/proto.BenefitService/GetBenefit"
)

// BenefitServiceClient is the client API for BenefitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BenefitServiceClient interface {
	GetBenefit(ctx context.Context, in *NewBenefit, opts ...grpc.CallOption) (*Users, error)
}

type benefitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBenefitServiceClient(cc grpc.ClientConnInterface) BenefitServiceClient {
	return &benefitServiceClient{cc}
}

func (c *benefitServiceClient) GetBenefit(ctx context.Context, in *NewBenefit, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, BenefitService_GetBenefit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BenefitServiceServer is the server API for BenefitService service.
// All implementations must embed UnimplementedBenefitServiceServer
// for forward compatibility
type BenefitServiceServer interface {
	GetBenefit(context.Context, *NewBenefit) (*Users, error)
	mustEmbedUnimplementedBenefitServiceServer()
}

// UnimplementedBenefitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBenefitServiceServer struct {
}

func (UnimplementedBenefitServiceServer) GetBenefit(context.Context, *NewBenefit) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBenefit not implemented")
}
func (UnimplementedBenefitServiceServer) mustEmbedUnimplementedBenefitServiceServer() {}

// UnsafeBenefitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BenefitServiceServer will
// result in compilation errors.
type UnsafeBenefitServiceServer interface {
	mustEmbedUnimplementedBenefitServiceServer()
}

func RegisterBenefitServiceServer(s grpc.ServiceRegistrar, srv BenefitServiceServer) {
	s.RegisterService(&BenefitService_ServiceDesc, srv)
}

func _BenefitService_GetBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBenefit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BenefitServiceServer).GetBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BenefitService_GetBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BenefitServiceServer).GetBenefit(ctx, req.(*NewBenefit))
	}
	return interceptor(ctx, in, info, handler)
}

// BenefitService_ServiceDesc is the grpc.ServiceDesc for BenefitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BenefitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BenefitService",
	HandlerType: (*BenefitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBenefit",
			Handler:    _BenefitService_GetBenefit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/benefit.proto",
}
